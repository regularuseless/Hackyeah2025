[gd_scene load_steps=7 format=3 uid="uid://cfe042b2ttoua"]

[ext_resource type="Texture2D" uid="uid://ry7gftmlmojp" path="res://Resources/Assets/NOB.png" id="1_ly0w5"]
[ext_resource type="AudioStream" uid="uid://brhs0ltyswjol" path="res://Resources/Assets/Sounds/radio_nie_ustawione.mp3" id="2_ly0w5"]
[ext_resource type="AudioStream" uid="uid://dg061unn5ecqj" path="res://Resources/Assets/Sounds/mors.mp3" id="3_q0b5m"]
[ext_resource type="Texture2D" uid="uid://b5aj5i40yvn2d" path="res://Resources/Assets/radio.png" id="4_q0b5m"]

[sub_resource type="GDScript" id="GDScript_jes5u"]
script/source = "extends Node2D

# --- Zakres strojenia (MHz) ---
@export var min_freq: float = 88.0
@export var max_freq: float = 108.0

# --- Cel i miękkość strojenia ---
@export var target_freq: float = 101.0
@export var tolerance: float = 0.25
@export var soft_edge: float = 1.0

# --- Mapa kąt <-> częstotliwość (prezentacja) ---
@export var angle_min: float = -120.0
@export var angle_max: float = 120.0

# --- Crossfade w dB ---
@export var msg_db_min: float = -40.0
@export var msg_db_max: float = 0.0
@export var noise_db_min: float = -80.0
@export var noise_db_max: float = 0.0

# --- Wygładzanie głośności (dB/s) ---
@export var fade_speed_db: float = 60.0

# --- Scroll: jeden „ząbek” = 1 MHz ---
@export var scroll_step_mhz: float = 0.25

# --- Label (opcjonalny) ---
@export var label_path: NodePath
@export var show_debug_text: bool = false
@export var debug_text_size: int = 18
@export var debug_offset: Vector2 = Vector2(0, -50)

@onready var knob: Node2D = $Knob
@onready var area: Area2D = $Knob/Area2D
@onready var noise_player: AudioStreamPlayer2D = $NoisePlayer
@onready var msg_player: AudioStreamPlayer2D = $MessagePlayer
@onready var label: Label = (get_node_or_null(label_path) as Label)

var current_freq: float
var _msg_db_goal: float = 0.0
var _noise_db_goal: float = 0.0

func _ready() -> void:
	current_freq = (min_freq + max_freq) * 0.5
	_set_knob_from_freq(current_freq)

	if not noise_player.playing: noise_player.play()
	if not msg_player.playing: msg_player.play()

	area.input_event.connect(_on_area_input)

	_update_goals()
	_apply_volume_immediate()
	_update_label()

func _process(delta: float) -> void:
	var step := fade_speed_db * delta
	if absf(noise_player.volume_db - _noise_db_goal) > 0.05:
		noise_player.volume_db = move_toward(noise_player.volume_db, _noise_db_goal, step)
	if absf(msg_player.volume_db - _msg_db_goal) > 0.05:
		msg_player.volume_db = move_toward(msg_player.volume_db, _msg_db_goal, step)

func _on_area_input(_vp, event: InputEvent, _shape_idx: int) -> void:
	if event is InputEventMouseButton and event.pressed:
		if event.button_index == MOUSE_BUTTON_WHEEL_UP:
			_nudge_freq(+scroll_step_mhz)
			get_viewport().set_input_as_handled()
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			_nudge_freq(-scroll_step_mhz)
			get_viewport().set_input_as_handled()

func _nudge_freq(delta_mhz: float) -> void:
	current_freq = clampf(current_freq + delta_mhz, min_freq, max_freq)
	_set_knob_from_freq(current_freq)
	_update_goals()
	_update_label()
	if show_debug_text:
		queue_redraw()

func _set_knob_from_freq(f: float) -> void:
	var t := inverse_lerp(min_freq, max_freq, clampf(f, min_freq, max_freq))
	var deg := lerpf(angle_min, angle_max, t)
	knob.rotation_degrees = deg

func _tuned_ratio() -> float:
	var d := absf(current_freq - target_freq)
	if d <= tolerance:
		return 1.0
	var extra := d - tolerance
	var falloff := 1.0 / maxf(0.001, soft_edge)
	return clampf(1.0 - extra * falloff, 0.0, 1.0)

func _update_goals() -> void:
	var r := _tuned_ratio()  # 0..1
	_msg_db_goal = lerpf(msg_db_min, msg_db_max, r)
	_noise_db_goal = lerpf(noise_db_max, noise_db_min, r)

func _apply_volume_immediate() -> void:
	noise_player.volume_db = _noise_db_goal
	msg_player.volume_db = _msg_db_goal

func _update_label() -> void:
	if label:
		label.text = String.num(current_freq, 2) + \" MHz\"

# --- debug w świecie (opcjonalnie) ---
func _draw() -> void:
	if not show_debug_text:
		return
	var font: Font = ThemeDB.fallback_font
	var txt := String.num(current_freq, 2) + \" MHz\"
	draw_string(font, knob.position + debug_offset, txt, HORIZONTAL_ALIGNMENT_LEFT, -1.0, debug_text_size)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_prr26"]

[node name="Radio" type="Node2D"]
script = SubResource("GDScript_jes5u")
label_path = NodePath("Label")

[node name="Knob" type="Node2D" parent="."]
z_index = 6
position = Vector2(855, 600)
scale = Vector2(2, 2)

[node name="KnobSprite" type="Sprite2D" parent="Knob"]
z_index = 6
scale = Vector2(1.2, 1.2)
texture = ExtResource("1_ly0w5")

[node name="Area2D" type="Area2D" parent="Knob"]
z_index = 6
scale = Vector2(2, 2)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Knob/Area2D"]
z_index = 6
scale = Vector2(1.5, 1.5)
shape = SubResource("CircleShape2D_prr26")

[node name="NoisePlayer" type="AudioStreamPlayer2D" parent="."]
position = Vector2(303, -36)
stream = ExtResource("2_ly0w5")

[node name="MessagePlayer" type="AudioStreamPlayer2D" parent="."]
position = Vector2(157, -32)
stream = ExtResource("3_q0b5m")

[node name="Label" type="Label" parent="."]
z_index = 8
offset_left = 940.0
offset_top = 469.0
offset_right = 982.0
offset_bottom = 492.0
scale = Vector2(2, 2)

[node name="RadioSprite" type="Sprite2D" parent="."]
position = Vector2(980, 517)
scale = Vector2(2, 2)
texture = ExtResource("4_q0b5m")
